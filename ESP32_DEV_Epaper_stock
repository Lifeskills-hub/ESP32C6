#include <GxEPD2_BW.h>
#include <WiFiManager.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// --- Pin map (Waveshare ESP32 Driver Board) ---
#define PIN_BUSY 25
#define PIN_RST  26
#define PIN_DC   27
#define PIN_CS   15
#define PIN_SCK  13
#define PIN_MOSI 14
#define PIN_MISO -1

GxEPD2_BW<GxEPD2_290_T5D, GxEPD2_290_T5D::HEIGHT> display(
  GxEPD2_290_T5D(PIN_CS, PIN_DC, PIN_RST, PIN_BUSY)
);

// API settings
const char* FINNHUB_API_KEY = "d2u209hr01qr5a74dc90d2u209hr01qr5a74dc9g";
const char* COINGECKO_API_KEY = "CG-fSKnTDQ2r7Qj39hFGb8NTp18";
const char* STOCK_SYMBOL = "MSTR";
const char* CRYPTO_SYMBOL = "crypto-com-chain";

// Refresh settings
const unsigned long REFRESH_INTERVAL = 30000;
unsigned long lastRefresh = 0;

// Partial refresh zones
#define STOCK_PRICE_X 20
#define STOCK_PRICE_Y 40  // Moved up from 50 to avoid overlap with percentage
#define STOCK_PRICE_W 100
#define STOCK_PRICE_H 35

#define STOCK_PERCENT_X 20
#define STOCK_PERCENT_Y 75
#define STOCK_PERCENT_W 100
#define STOCK_PERCENT_H 30

#define CRYPTO_PRICE_X 170
#define CRYPTO_PRICE_Y 40  // Moved up from 50 to avoid overlap with percentage
#define CRYPTO_PRICE_W 100
#define CRYPTO_PRICE_H 35

#define CRYPTO_PERCENT_X 170
#define CRYPTO_PERCENT_Y 75
#define CRYPTO_PERCENT_W 100
#define CRYPTO_PERCENT_H 30

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("=== Partial Refresh Dashboard ===");

  pinMode(PIN_BUSY, INPUT);
  SPI.begin(PIN_SCK, PIN_MISO, PIN_MOSI);
  display.init(115200, true, 2, false);
  display.setRotation(1);
  display.setTextColor(GxEPD_BLACK);

  WiFiManager wifiManager;
  wifiManager.setTimeout(180);
  display.setCursor(0, 20);
  display.println("Connecting to WiFi...");
  display.display(true);

  if (!wifiManager.autoConnect("ESP32-Setup", "12345678")) {
    display.fillScreen(GxEPD_WHITE);
    display.setCursor(0, 20);
    display.println("WiFi Failed");
    display.display(true);
    while (1);
  }

  display.fillScreen(GxEPD_WHITE);
  drawStaticUI();
  display.display(true); // Full refresh for static content

  updateDisplay();
}

void loop() {
  unsigned long currentMillis = millis();
  if (currentMillis - lastRefresh >= REFRESH_INTERVAL) {
    lastRefresh = currentMillis;
    updateDisplay();
  }
}

void drawStaticUI() {
  display.setTextSize(2); // Smaller ticker font

  int16_t tbx, tby; uint16_t tbw, tbh;
  display.getTextBounds(STOCK_SYMBOL, 0, 0, &tbx, &tby, &tbw, &tbh);
  int x = (display.width() / 4) - (tbw / 2);
  int y = 20;
  display.setCursor(x, y);
  display.println(STOCK_SYMBOL);

  display.getTextBounds("CRO", 0, 0, &tbx, &tby, &tbw, &tbh);
  x = (3 * display.width() / 4) - (tbw / 2);
  display.setCursor(x, y);
  display.println("CRO");
}

void drawTextBox(int x, int y, int w, int h, const String& text, uint8_t textSize = 2) {
  display.setTextSize(textSize);
  display.fillRect(x, y, w, h, GxEPD_WHITE);

  int16_t tbx, tby; uint16_t tbw, tbh;
  display.getTextBounds(text, 0, 0, &tbx, &tby, &tbw, &tbh);
  int cx = x + (w - tbw) / 2;
  int cy = y + (h - tbh) / 2;
  display.setCursor(cx, cy);
  display.println(text);
  display.displayWindow(x, y, w, h);
}

void updateDisplay() {
  String stockPriceDisplay = "N/A";
  String stockPercentDisplay = "N/A";
  String cryptoPriceDisplay = "N/A";
  String cryptoPercentDisplay = "N/A";

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // Finnhub
    String url = String("https://finnhub.io/api/v1/quote?symbol=") + STOCK_SYMBOL + "&token=" + FINNHUB_API_KEY;
    http.begin(url);
    int httpCode = http.GET();
    if (httpCode == HTTP_CODE_OK) {
      String payload = http.getString();
      DynamicJsonDocument doc(1024);
      deserializeJson(doc, payload);
      float price = doc["c"];
      float percentChange = doc["dp"];
      if (price > 0) {
        stockPriceDisplay = "$" + String(price, 2);
        stockPercentDisplay = (percentChange >= 0 ? "+" : "") + String(percentChange, 2) + "%";
      }
    }
    http.end();

    // CoinGecko
    url = String("https://api.coingecko.com/api/v3/coins/markets?ids=") + CRYPTO_SYMBOL + "&vs_currency=usd&x_cg_api_key=" + COINGECKO_API_KEY;
    http.begin(url);
    httpCode = http.GET();
    if (httpCode == HTTP_CODE_OK) {
      String payload = http.getString();
      DynamicJsonDocument doc(1024);
      deserializeJson(doc, payload);
      if (doc.is<JsonArray>() && doc.size() > 0) {
        float price = doc[0]["current_price"];
        float percentChange = doc[0]["price_change_percentage_24h"];
        if (price > 0) {
          cryptoPriceDisplay = "$" + String(price, 4);
          cryptoPercentDisplay = (percentChange >= 0 ? "+" : "") + String(percentChange, 2) + "%";
        }
      }
    }
    http.end();
  }

  // Partial refresh zones
  drawTextBox(STOCK_PRICE_X, STOCK_PRICE_Y, STOCK_PRICE_W, STOCK_PRICE_H, stockPriceDisplay);
  drawTextBox(STOCK_PERCENT_X, STOCK_PERCENT_Y, STOCK_PERCENT_W, STOCK_PERCENT_H, stockPercentDisplay);
  drawTextBox(CRYPTO_PRICE_X, CRYPTO_PRICE_Y, CRYPTO_PRICE_W, CRYPTO_PRICE_H, cryptoPriceDisplay);
  drawTextBox(CRYPTO_PERCENT_X, CRYPTO_PERCENT_Y, CRYPTO_PERCENT_W, CRYPTO_PERCENT_H, cryptoPercentDisplay);
}
